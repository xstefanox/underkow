buildscript {
    ext.v = [
            kotlin     : '1.3.60',
            kotlintest : '3.4.2',
            undertow   : '2.0.28.Final',
            slf4j      : '1.7.25',
            restassured: '4.1.2',
            mockk      : '1.9.3',
            okhttp     : '4.2.2',
            coroutines : '1.3.1',
            klaxon     : '5.2',
            junit      : '5.5.2',
            eventsource: '1.10.1',
            failsafe   : '2.3.1',
    ]
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.60'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '0.7'
    id 'org.jlleitschuh.gradle.ktlint' version '9.1.1'
    id 'com.github.ben-manes.versions' version '0.27.0'
    id 'org.jetbrains.dokka' version '0.10.0'
    id 'signing'
    id 'maven'
    id 'java-library'
}

repositories {
    jcenter()
}

sourceSets {
    example {
        kotlin {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
}

configurations {
    exampleImplementation.extendsFrom testImplementation
    exampleRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {

    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: v.kotlin
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: v.coroutines
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: v.okhttp
    api group: 'io.undertow', name: 'undertow-core', version: v.undertow
    api group: 'org.slf4j', name: 'slf4j-api', version: v.slf4j

    testImplementation group: 'io.kotlintest', name: 'kotlintest-assertions', version: v.kotlintest
    testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: v.slf4j
    testImplementation group: 'io.rest-assured', name: 'rest-assured', version: v.restassured
    testImplementation group: 'io.mockk', name: 'mockk', version: v.mockk
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: v.junit
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: v.junit
    testImplementation group: 'com.launchdarkly', name: 'okhttp-eventsource', version: v.eventsource
    testImplementation group: 'net.jodah', name: 'failsafe', version: v.failsafe

    exampleImplementation group: 'com.beust', name: 'klaxon', version: v.klaxon
}

configurations.all {
    resolutionStrategy {

        failOnVersionConflict()

        force group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: v.kotlin
        force group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-common', version: v.kotlin
        force group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk7', version: v.kotlin
        force group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: v.kotlin
    }
}

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = "1.8"
        apiVersion = "1.3"
        languageVersion = "1.3"
    }
}

compileTestKotlin {
    sourceCompatibility = compileKotlin.sourceCompatibility
    targetCompatibility = compileKotlin.targetCompatibility

    kotlinOptions {
        jvmTarget = compileKotlin.kotlinOptions.jvmTarget
        apiVersion = compileKotlin.kotlinOptions.apiVersion
        languageVersion = compileKotlin.kotlinOptions.languageVersion
    }
}

ktlint {
    coloredOutput = false
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }

    systemProperty 'org.jboss.logging.provider', 'slf4j'
}

idea {
    module {
        downloadSources = true
    }
}

dokka {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

task sourcesJar(type: org.gradle.jvm.tasks.Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: org.gradle.jvm.tasks.Jar) {
    archiveClassifier = 'javadoc'
    from dokka
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

signing {
    useGpgCmd()
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: findProperty('nexusUsername'), password: findProperty('nexusPassword'))
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: findProperty('nexusUsername'), password: findProperty('nexusPassword'))
            }

            pom.project {
                name = 'Underkow'
                packaging 'jar'
                description 'A Kotlin DSL to configure Undertow routing'
                url 'https://github.com/xstefanox/underkow'

                scm {
                    connection 'scm:https://github.com/xstefanox/underkow.git'
                    developerConnection 'scm:https://github.com/xstefanox/underkow.git'
                    url 'https://github.com/xstefanox/underkow'
                }

                licenses {
                    license {
                        name = 'The MIT License'
                        url 'http://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id 'xstefanox'
                        name = 'Stefano Varesi'
                        email 'stefano.varesi@gmail.com'
                    }
                }
            }
        }
    }
}

group 'io.github.xstefanox'
version 'SNAPSHOT'

if (hasProperty('release')) {
    version = findProperty('release')
}
